leadership$q3 + leadership$q4 + leadership$q5) / 5
leadership
#SHORT WAY USING TRANSFORM
leadership <- transform(leadership,
total_score = q1 + q2 + q3 + q4 + q5,
mean_score = (q1 + q2 + q3 + q4 + q5)/5)
leadership
leadership$age[leadership$age == 99] <- NA
leadership
leadership <- within(leadership,{
agecat<-NA
agecat[age > 75] <- "Elder"
agecat[age >= 55 & age <= 75] <- "Middle Aged"
agecat[age < 55] <- "Young"})
leadership
leadership <- data.frame(manager, date, country, gender, age,
q1, q2, q3, q4, q5, stringsAsFactors = FALSE)
#SHORT WAY USING TRANSFORM
leadership <- transform(leadership,
total_score = q1 + q2 + q3 + q4 + q5,
mean_score = (q1 + q2 + q3 + q4 + q5)/5)
#Replace Age == 99 with NA
leadership$age[leadership$age == 99] <- NA
leadership
leadership <- with(leadership,{
agecat<-NA
agecat[age > 75] <- "Elder"
agecat[age >= 55 & age <= 75] <- "Middle Aged"
agecat[age < 55] <- "Young"})
leadership
leadership <- data.frame(manager, date, country, gender, age,
q1, q2, q3, q4, q5, stringsAsFactors = FALSE)
#LONGER WAY TO ADD
leadership$total_score = leadership$q1 + leadership$q2 +
leadership$q3 + leadership$q4 + leadership$q5
leadership$mean_score = (leadership$q1 + leadership$q2 +
leadership$q3 + leadership$q4 + leadership$q5) / 5
#SHORT WAY USING TRANSFORM
leadership <- transform(leadership,
total_score = q1 + q2 + q3 + q4 + q5,
mean_score = (q1 + q2 + q3 + q4 + q5)/5)
#Replace Age == 99 with NA
leadership$age[leadership$age == 99] <- NA
leadership
leadership <- within(leadership,{
agecat<-NA
agecat[age > 75] <- "Elder"
agecat[age >= 55 & age <= 75] <- "Middle Aged"
agecat[age < 55] <- "Young"})
leadership
manager <- c(1, 2, 3, 4, 5)
date <- c("10/28/08", "10/28/08", "10/1/08", "10/12/08", "5/1/09")
country <- c("US", "US", "UK", "UK", "UK")
gender <- c("M", "F", "F", "M", "F")
age <- c(32, 45, 25, 39, 99)
q1 <- c(5, 3, 3, 3, 2)
q2 <- c(4, 5, 5, 3, 2)
q3 <- c(5, 2, 5, 4, 1)
q4 <- c(5, 5, 5, NA, 2)
q5 <- c(5, 5, 2, NA, 1)
leadership <- data.frame(manager, date, country, gender, age,
q1, q2, q3, q4, q5, stringsAsFactors = FALSE)
leadership
source('~/Documents/University of Chicago/Classes/Winter 2021/Data Analysis II/scripts/kabacoff_data_management.R', echo=TRUE)
leadership <- data.frame(manager, date, country, gender, age,
q1, q2, q3, q4, q5, stringsAsFactors = FALSE)
leadership
#LONGER WAY TO ADD
leadership$total_score = leadership$q1 + leadership$q2 +
leadership$q3 + leadership$q4 + leadership$q5
leadership$mean_score = (leadership$q1 + leadership$q2 +
leadership$q3 + leadership$q4 + leadership$q5) / 5
#SHORT WAY USING TRANSFORM
leadership <- transform(leadership,
total_score = q1 + q2 + q3 + q4 + q5,
mean_score = (q1 + q2 + q3 + q4 + q5)/5)
#Replace Age == 99 with NA
leadership$age[leadership$age == 99] <- NA
leadership
leadership <- transform(leadership,{
agecat<-NA
agecat[age > 75] <- "Elder"
agecat[age >= 55 & age <= 75] <- "Middle Aged"
agecat[age < 55] <- "Young"})
leadership
leadership <- within(leadership,{
agecat<-NA
agecat[age > 75] <- "Elder"
agecat[age >= 55 & age <= 75] <- "Middle Aged"
agecat[age < 55] <- "Young"})
leadership
fix(leadership)
fix(leadership)
install.packages(c("data", "editor"))
edit(leadership) #Data Editor not available it seems?
names(leadership)[2] <- "testDate"
names(leadership)["manager"] <- "managerID"
names(leadership$manager) <- "managerID"
leadership
names(leadership)$manager <- "managerID"
names(leadership)[1] <- "managerID"
leadership
names(leadership)[leadership$managerID] <- "managerID2"
leadership
names(leadership)[leadership$manager] <- "managerID"
leadership
source('~/Documents/University of Chicago/Classes/Winter 2021/Data Analysis II/scripts/kabacoff_data_management.R', echo=TRUE)
names(leadership)[2] <- "testDate"
names(leadership)[leadership$manager] <- "managerID"
leadership
source('~/Documents/University of Chicago/Classes/Winter 2021/Data Analysis II/scripts/kabacoff_data_management.R', echo=TRUE)
names(leadership)[6:10] <- c("item1", "item2", "item3", "item4", "item5")
leadership
is.na(leadership)
new_data <- na.omit(leadership)
new_data
myformat <- "%m/%d/%y"
leadership$date <- as.Date(leadership$date, myformat)
leadership
leadership$testDate <- as.Date(leadership$testDate, myformat)
leadership
Sys.Date()
date()
today <- Sys.Date()
format(today, format="%B %d %Y")
format(today, format="%A")
startdate <- as.Date("2004-02-13")
enddate <- as.Date("2011-01-22")
days <- enddate - startdate
days
difftime(startdate, enddate, units="weeks")
difftime(enddate, startdate, units="weeks")
birthday = as.Date("1970-01-01")
format(birthday, format="%A")
birthday = as.Date("1988-01-09")
format(birthday, format="%A")
newdata <- leadership[order(leadership$age)]
newdata
newdata <- leadership[order(leadership$gender, leadership$age)]
newdata
newdata <- leadership[order(leadership$age),]
newdata
newdata <- leadership[order(leadership$gender, leadership$age),]
newdata
newdata <- leadership[order(leadership$gender, -leadership$age),]
newdata
newdata <- leadership[,c(6:10)]
newdata
myvars <- c("items1", "items2")
newdata <- leadership[myvars]
myvars <- c("item1", "item2")
newdata <- leadership[myvars]
newdata
#install spacyr
install.packages("spacyr")
library(spacyr)
spacy_initialize(model = "en_core_web_sm")
library(spacyr)
spacy_initialize(model = "en_core_web_sm")
# load and initialize the model
library(spacyr)
spacy_initialize(model = "en_core_web_sm")
spacy_download_langmodel("en_core_web_sm")
library(spacyr)
spacy_download_langmodel("en_core_web_sm")
spacy_initialize(model = "en_core_web_sm")
conda info --envs
conda info --envs
library(spacyr)
spacy_initialize(model = "en_core_web_sm")
library(spacyr)
spacy_initialize(model = "en_core_web_sm")
#install.packages("quanteda")
library(quanteda)
library(spacyr)
#spacy_download_langmodel("en_core_web_sm")
spacy_initialize(model = "en_core_web_sm")
inaugural_corpus <- texts(data_corpus_inaugural)[30:40]
inaugural_corpus
parsed <- spacy_parse(inaugural_corpus, entity = TRUE)
sentLen <- parsed$sentence_id.count(parsed$token_id)
#install.packages("quanteda")
install.packages("tidyverse")
sentLen <- parsed.groupby(sentence_id, token_id)
sentLen <- table(parsed$sentence_id, parsed$token_id)
sentLen
inaugural_corpus <- texts(data_corpus_inaugural)[2]
inaugural_corpus
library(coreNLP)
initCoreNLP()
inaugural_corpus <- texts(data_corpus_inaugural)[2]
inaugural_corpus
sentLen <- table(getToken(annotateFile(inaugural_corpus)))
anno <- annotateFile(inaugural_corpus)
anno <- annotateString(inaugural_corpus)
sentLen <- table(getToken(anno)$sentence)
hist(sentLen, breaks=30)
inaugural_corpus <- texts(data_corpus_inaugural)[50]
inaugural_corpus
inaugural_corpus
anno <- annotateString(inaugural_corpus)
sentLen <- table(getToken(anno)$sentence)
hist(sentLen, breaks=30)
View(parsed)
View(anno)
View(parsed)
inaugural_corpus <- texts(data_corpus_inaugural)[50] #1985-Reagan
clear
clear
clean
L
inaugural_corpus <- texts(data_corpus_inaugural)[50] #1985-Reagan
inaugural_corpus
inaugural_corpus <- texts(data_corpus_inaugural)[50] #1985-Reagan
anno <- annotateString(inaugural_corpus)
inaugural_corpus <- texts(data_corpus_inaugural)[55] #1985-Reagan
initCoreNLP(type='chinese')
downloadCoreNLP(type='chinese')
downloadCoreNLP(type='chinese')
downloadCoreNLP(type='chinese')
downloadCoreNLP(type='chinese', timeout=30000)
initCoreNLP(type='chinese')
inaugural_corpus <- texts(data_corpus_inaugural)[55] #1985-Reagan
inaugural_corpus
inaugural_corpus <- texts(data_corpus_inaugural)[59] #1985-Reagan
inaugural_corpus
inaugural_corpus <- texts(data_corpus_inaugural)[58] #1985-Reagan
inaugural_corpus
anno <- annotateString(inaugural_corpus)
sentLen <- table(getToken(anno)$sentence)
hist(sentLen, breaks=30)
table(token$POS)
token <- getToken(anno)
table(token$POS)
ut <- universalTagset(toke$POS)
ut <- universalTagset(token$POS)
table(ut)
nountCnt <- tapply(ut == "NOUN", token$sentence, sum)
pronCnt <- tapply(ut == "PRON", token$sentence, sum)
adjCnt <- tapply(ut == "ADJ", token$sentence, sum)
verbCnt <- tapply(ut == "VERB", token$sentence, sum)
posDF <- data.fram(nounCnt, pronCnt, adjCnt, verbCnt)
posDF <- data.frame(nounCnt, pronCnt, adjCnt, verbCnt)
nounCnt <- tapply(ut == "NOUN", token$sentence, sum)
posDF <- data.frame(nounCnt, pronCnt, adjCnt, verbCnt)
plot(nounCnt+pronCnt, adjCnt, pch=19, cex=2,
col=rgb(0,0,1,0.02))
plot(nounCnt+pronCnt, verbCnt, pch=19, cex=2,
col=rgb(0,0,1,0.02))
index <- which(ut=="NOUN")
tab <- table(token$lemma[index])
head(sort(tab,decreasing=TRUE),25)
table(token$NER == "LOCATION")
unique(token$lemma[token$NER == "LOCATION"])
unique(token$lemma[token$NER == "PERSON"])
# create the quanteda corpus object
abc2_corpus <- corpus(inaugural_corpus)
#use quanteda's dfm() to create the document-feature matrix (dfm) object for the word cloud
textplot_wordcloud(dfm(abc2_corpus))
#remove punctuation and stopwords
abc2_toks <- tokens(abc2_corpus, remove_punt = TRUE)
abc2_nostop <- tokens_select(abc2_toks, pattern=stopwords("en"), selection = "remove")
abc2_nostop
textplot_wordcloud(dfm(abc2_nostop), color=c('red','pink','green','purple','orange','blue'))
#remove punctuation and stopwords
abc2_toks <- tokens(abc2_corpus)
abc2_nostop <- tokens_select(abc2_toks, pattern=stopwords("en"), selection = "remove")
abc2_nostop
#remove punctuation and stopwords
abc2_toks <- tokens(abc2_corpus, remove_punct=TRUE)
abc2_nostop <- tokens_select(abc2_toks, pattern=stopwords("en"), selection = "remove")
abc2_nostop
textplot_wordcloud(dfm(abc2_nostop), color=c('red','pink','green','purple','orange','blue'))
# review the dataset
mtcars
nrow(mtcars)
# create pca model, throw out non-numeric columns "vs" and "am"
mtcars.pca <- prcomp(mtcars[,c(1:7,10,11)], center = TRUE,scale. = TRUE)
summary(mtcars.pca)
#library(devtools)
#install_github("vqv/ggbiplot")
library(ggbiplot)
library(devtools)
#install_github("vqv/ggbiplot")
library(ggbiplot)
install_github("vqv/ggbiplot")
#install_github("vqv/ggbiplot")
library(ggbiplot)
# create the 2D plot (data rows are each represented by one black circle)
ggbiplot(mtcars.pca)
ggbiplot(mtcars.pca, labels=rownames(mtcars))
cor(mtcars)
library(corrplot)
#2. Corrgrams/Corrplots for the dataset(corrplots are better)
packages("corrplot")
corrplot(cor(mtcars), method="circle")
#3. Scatterplots with regression lines for the dataset
plot(mtcars)
pairs(mtcars, panel-panel.smooth)
pairs(mtcars, panel=panel.smooth)
#3. Scatterplots with regression lines for the dataset
plot(mtcars)
pairs(mtcars, panel=panel.smooth)
library(gender)
setwd('/Users/Spencer/Digital History/digital_history_2022/text_analysis_p2/')
df <- read.excel("data/people_updated.xlsx")
df <- read.csv("data/people_updated.xlsx")
library("readxl")
df <- read_excel("data/people_updated.xlsx")
View(df)
author_list <- as.character(df[,2]);
author_list <- as.character(df[,1]);
gender_list <- c()
a_list <- c()
length(author_list)
for (a in 1: 5)){
author_first <- strsplit(author_list[a], split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(author_first, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
gender_list[[a]] <- gender
}
for (a in 1: 5)){
author_first <- strsplit(author_list[a], split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(author_first, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
gender_list[a] <- gender
}
for (a in 1: 5)){
author_first <- strsplit(author_list[a], split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(author_first, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
gender_list[[a]] <- gender
}
for (a in 1: 5)){
author_first <- strsplit(author_list[a], split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(author_first, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
print(gender)
#gender_list[[a]] <- gender
}
for (a in 1: 5){
author_first <- strsplit(author_list[a], split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(author_first, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
#gender_list <- append(gender_list, c(gender, author_list[a]))
print(cat(paste(year_list[a], gender, author_list[a], sep="\t")))
#a_list <- append(a_list, author_list[a])
}
for (a in 1: 5){
author_first <- strsplit(author_list[a], split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(author_first, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
#gender_list <- append(gender_list, c(gender, author_list[a]))
print(cat(paste(gender, author_list[a], sep="\t")))
#a_list <- append(a_list, author_list[a])
}
for (x in author_list){
print(x)
}
for (x in author_list){
print(x)
break
}
View(df)
for(i in 1:nrow(df)){
print(df[i,]$name)
break
}
for(i in 1:5)){ #nrow(df)){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
print(first_name)
}
for(i in 1:5)){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
print(first_name)
}
for(i in 1:5){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
print(first_name)
}
for(i in 1:5){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(first_name, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
#gender_list <- append(gender_list, c(gender, author_list[a]))
print(cat(paste(gender, author_list[a], sep="\t")))
}
for(i in 1:5){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(first_name, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
#gender_list <- append(gender_list, c(gender, author_list[a]))
print(cat(paste(gender, first_name, sep="\t")))
}
for(i in 1:5){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(first_name, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
#gender_list <- append(gender_list, c(gender, author_list[a]))
print(paste(gender, first_name, sep="\t"))
}
df_total = data.frame()
for(i in 1:5){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(first_name, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
temp_df <- data.frame(gender)
df_total <- rbind(df_total,temp_df)
}
View(df_total)
df_total = data.frame()
for(i in 1:5){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(first_name, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
temp_df <- data.frame(first_name, gender)
df_total <- rbind(df_total,temp_df)
}
View(df_total)
df_total = data.frame()
library(gender)
library("readxl")
setwd('/Users/Spencer/Digital History/digital_history_2022/text_analysis_p2/')
df <- read_excel("data/people_updated.xlsx")
df_total = data.frame()
for(i in 1:nrow(df)){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(first_name, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
temp_df <- data.frame(first_name, gender)
df_total <- rbind(df_total,temp_df)
}
df_total = data.frame()
for(i in 1:nrow(df)){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(first_name, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
if (gender != 'male' or gender != 'female'){
gender <- "NA"
}
temp_df <- data.frame(first_name, gender)
df_total <- rbind(df_total,temp_df)
}
View(df_total)
df_total = data.frame()
for(i in 1:10){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(first_name, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
if (gender != 'male' || gender != 'female'){
gender <- "NA"
}
temp_df <- data.frame(first_name, gender)
df_total <- rbind(df_total,temp_df)
}
View(df_total)
for(i in 1:10){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(first_name, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
if (gender != 'male' && gender != 'female'){
gender <- "NA"
}
temp_df <- data.frame(first_name, gender)
df_total <- rbind(df_total,temp_df)
}
for(i in 1:10){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(first_name, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
if(is.na(gender)) {gender <- "NA"}
temp_df <- data.frame(first_name, gender)
df_total <- rbind(df_total,temp_df)
}
df_total = data.frame()
for(i in 1:10){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(first_name, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
if(length(gender) == 0) {gender <- "NA"}
temp_df <- data.frame(first_name, gender)
df_total <- rbind(df_total,temp_df)
}
View(df_total)
df_total = data.frame()
for(i in 1:nrow(df)){
first_name <- strsplit(df[i,]$name, split=" ")[[1]][1]
year <- 2000
temp_gender <- gender(first_name, years=year, method="ssa")
gender <- temp_gender['gender'][[1]]
if(length(gender) == 0) {gender <- "NA"}
temp_df <- data.frame(first_name, gender)
df_total <- rbind(df_total,temp_df)
}
write.csv(df_total,"gender_df.csv", row.names = FALSE)
